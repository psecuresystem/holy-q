import Number from '../../Math/Number';
import QuantumGate from '../../QuantumComputing/Gates/QuantumGate';
import Qubit from '../../QuantumComputing/Qubit';
import Types from '../Binding/Types';

export enum SyntaxKind {
  // Tokens
  WHITESPACE_TOKEN = 'whitespace token',
  LITERAL_TOKEN = 'literal token',
  OPERATOR_TOKEN = 'operator token',
  END_OF_FILE_TOKEN = 'END_OF_FILE_TOKEN',
  PLUS_TOKEN = 'PLUS_TOKEN',
  MINUS_TOKEN = 'MINUS_TOKEN',
  SLASH_TOKEN = 'SLASH_TOKEN',
  STAR_TOKEN = 'STAR_TOKEN',
  UNDEFINED_TOKEN = 'UNDEFINED_TOKEN',
  CLOSE_BRACKET_TOKEN = 'CLOSE_BRACKET_TOKEN',
  PIPE_TOKEN = 'PIPE_TOKEN',
  AMPERSAND_TOKEN = 'AMPERSAND_TOKEN',
  AMPERSAND_AMPERSAND_TOKEN = 'AMPERSAND_AMPERSAND_TOKEN',
  PIPE_PIPE_TOKEN = 'PIPE_PIPE_TOKEN',
  OPEN_BRACKET_TOKEN = 'OPEN_BRACKET_TOKEN',
  LET_KEYWORD = 'LET_KEYWORD',
  MUT_TOKEN = 'MUT_TOKEN',
  EQUALS_EQUALS_TOKEN = 'EQUALS_EQUALS_TOKEN',
  BANG_EQUALS_TOKEN = 'BANG_EQUALS_TOKEN',
  SOME_SPACE_TOKEN = 'SOME_SPACE_TOKEN',
  END_OF_STATEMENT_TOKEN = 'END_OF_STATEMENT_TOKEN',
  INT_TOKEN = 'INT_TOKEN',
  STRING_TOKEN = 'STRING_TOKEN',
  IDENTIFIER_TOKEN = 'IDENTIFIER_TOKEN',
  COLON_TOKEN = 'COLON_TOKEN',
  EQUALS_TOKEN = 'EQUALS_TOKEN',
  BANG_TOKEN = 'BANG_TOKEN',
  IF_TOKEN = 'IF_TOKEN',
  COMMA_TOKEN = 'COMMA_TOKEN',
  OPEN_CURLY_BRACE_TOKEN = 'OPEN_CURLY_BRACE_TOKEN',
  CLOSE_CURLY_BRACE_TOKEN = 'CLOSE_CURLY_BRACE_TOKEN',
  // Expressions
  UNARY_EXPRESSION = 'UNARY_EXPRESSION',
  LITERAL_EXPRESSION = 'LITERAL_EXPRESSION',
  PARENTHESIZED_EXPRESSION = 'PARENTHESIZED_EXPRESSION',
  BINARY_EXPRESSION = 'BINARY_EXPRESSION',
  GLOBAL_SCOPE_EXPRESSION = 'GLOBAL_SCOPE_EXPRESSION',
  ASSIGNMENT_EXPRESSION = 'ASSIGNMENT_EXPRESSION',
  NAME_EXPRESSION_SYNTAX = 'NAME_EXPRESSION_SYNTAX',
  REASSIGNMENT_EXPRESSION = 'REASSIGNMENT_EXPRESSION',
  CALL_EXPRESSION = 'CALL_EXPRESSION',
  IF_STATEMENT_EXPRESSION = 'IF_STATEMENT_EXPRESSION',
  BLOCK_EXPRESSION = 'BLOCK_EXPRESSION',
  EXPRESSION_STATEMENT = 'EXPRESSION_STATEMENT',
}

export type operators = '+' | '-' | '*' | '/';

export interface Variable {
  value: any;
  type: Types;
}
